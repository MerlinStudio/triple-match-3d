using System;using System.Collections.Generic;using DG.Tweening;using Game.Core.Configurations;using Game.Modules.CurveMapModule.Model;using TMPro;using UniRx;using UnityEngine;using UnityEngine.UI;namespace Game.Scripts.Game.UI.Widgets{    public class CellLevelMapView : MonoBehaviour    {        [SerializeField]        private List<TextMeshProUGUI> levelNumberTexts;                [SerializeField]        private GameObject openState;                [SerializeField]        private GameObject closeState;                [SerializeField]        private GameObject currentState;                [SerializeField]        private Transform cellContentTransform;                [SerializeField]        private List<Image> fullStars;        [SerializeField]        private List<Transform> emptyStarsTransforms;                [SerializeField]        private Button button;                [SerializeField]        private Transform closeLineTransform;        [SerializeField]        private Transform openLineTransform;                [SerializeField]        private Transform startPositionTransform;                [SerializeField]        private Transform openLineParticleSystemTransform;                private CompositeDisposable compositeDisposables;        private Sequence sequence;        private LevelMapParameters levelMapParameters;        public List<Transform> EmptyStarsTransforms => emptyStarsTransforms;        public event Action<CellLevelMapView> EventCellLevelMapSelected;        public void Show(int levelNumber, LevelMapParameters levelMapParameters)        {            this.levelMapParameters = levelMapParameters;                        foreach (var levelNumberText in levelNumberTexts)            {                levelNumberText.text = $"{levelNumber}";            }            compositeDisposables = new CompositeDisposable();            button.OnClickAsObservable().Subscribe(HandleSelectCellLevelMap).AddTo(compositeDisposables);        }        public void Hide()        {            compositeDisposables.Dispose();            compositeDisposables.Clear();            TryKillSequence();        }        public void SetCellType(ECellMapState cellLevelMapState)        {            closeState.SetActive(cellLevelMapState == ECellMapState.Close);            openState.SetActive(cellLevelMapState == ECellMapState.Open);            currentState.SetActive(cellLevelMapState == ECellMapState.Current);            button.interactable = cellLevelMapState == ECellMapState.Open;            SelectCellAnimation(cellLevelMapState == ECellMapState.Current);        }                public void SetLineType(ECellMapState cellLevelMapState)        {            closeLineTransform.gameObject.SetActive(cellLevelMapState == ECellMapState.Close);            openLineTransform.gameObject.SetActive(cellLevelMapState == ECellMapState.Open);            openLineParticleSystemTransform.gameObject.SetActive(false);        }        public void SetProgressStars(int amountStars)        {            for (int i = 0; i < fullStars.Count; i++)            {                fullStars[i].gameObject.SetActive(i < amountStars);            }        }        private void SelectCellAnimation(bool isSelect)        {            if (isSelect)            {                sequence = DOTween.Sequence();                sequence.Append(cellContentTransform.DOScale(levelMapParameters.SelectedCellScale, levelMapParameters.SelectedCellDuration)                    .SetEase(levelMapParameters.SelectedCellEase));            }            else            {                TryKillSequence();                cellContentTransform.localScale = Vector3.one;            }        }        public void OpenLineAnimation(Action eventAnimationFinished)        {            Instantiate(levelMapParameters.OpenLineParticleSystem, openLineParticleSystemTransform);            openLineParticleSystemTransform.gameObject.SetActive(true);            closeLineTransform.gameObject.SetActive(true);            openLineTransform.gameObject.SetActive(true);                        openLineTransform.localPosition = startPositionTransform.localPosition;            openLineTransform.localScale = new Vector3(1, 0.5f, 1);            var endPosition = closeLineTransform.localPosition;            sequence = DOTween.Sequence();            sequence.Append(openLineTransform.DOScale(Vector3.one, levelMapParameters.OpenLineDuration));            sequence.Insert(0, openLineTransform.DOLocalMove(endPosition, levelMapParameters.OpenLineDuration)                .SetEase(levelMapParameters.OpenLineEase)                .OnKill(() =>                {                    openLineParticleSystemTransform.gameObject.SetActive(false);                    closeLineTransform.gameObject.SetActive(false);                    eventAnimationFinished?.Invoke();                }));        }        private void TryKillSequence()        {            if (sequence != null)            {                sequence.Kill();                sequence = null;            }        }        private void HandleSelectCellLevelMap(Unit unit)        {            EventCellLevelMapSelected?.Invoke(this);        }    }}